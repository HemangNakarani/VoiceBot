{"version":3,"sources":["components/VoiceCommandInterface/voicecommandinterface.module.css","components/FloatingButton/floatingbutton.module.css","assets/Chevron.svg","components/DialogBox/index.tsx","assets/Voice.svg","components/FloatingButton/index.tsx","components/BotInterface/index.tsx","assets/Microphone.svg","assets/SprinklrLogo.svg","utils/SpeechRecognitionConfig.js","processIntent/AdsManager/index.ts","utils/ApiService.ts","processIntent/EditorialCalendar/index.ts","processIntent/AdsManager/Open.ts","components/VoiceCommandInterface/index.tsx","processIntent/EditorialCalendar/Open.ts","processIntent/EditorialCalendar/SetDate.ts","processIntent/EditorialCalendar/SetPeriod.ts","processIntent/parseResponse.ts","assets/navigator.gif","App.tsx","reportWebVitals.ts","index.tsx","components/DialogBox/dialogbox.module.css","App.module.css"],"names":["module","exports","DialogBox","children","opened","toggle","className","style","onClick","src","Chevron","alt","FloatingButton","VoiceIcon","BotInterface","React","useState","state","setState","handleToggle","prevState","SpeechRecognition","window","webkitSpeechRecognition","SpeechGrammarList","webkitSpeechGrammarList","recognition","speechRecognitionList","addFromString","grammars","lang","interimResults","Intents","getIntent","body","axios","post","then","data","message","Open","entity","url","open","SpeechStateEnum","milliseconds","Date","now","SetDate","date","getTime","SetPeriod","startDate","days","view","parseResponse","response","console","log","intent","displayName","AdsIntent","parameters","fields","stringValue","AdsManager","EditorialIntent","EditorialCalendar","dateTime","datePeriod","structValue","endDate","oneDay","Math","round","VoiceCommandInterface","idle","speechState","setSpeechState","speechText","setSpeechText","command","a","loading","query","sessionId","contexts","action","fulfillmentText","handleStateChange","newState","useEffect","Recognition","onaudiostart","listening","onresult","event","last","results","length","transcript","handleCommand","onspeechend","stop","onerror","SprinklrLogo","start","Microphone","width","App","Navigator","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,UAAY,yCAAyC,gBAAgB,6CAA6C,aAAa,0CAA0C,kBAAkB,+CAA+C,qBAAqB,kDAAkD,sBAAsB,mDAAmD,iBAAiB,8CAA8C,oBAAoB,iDAAiD,wBAAwB,qDAAqD,sBAAsB,mDAAmD,eAAe,4CAA4C,iBAAiB,gD,mBCAlvBD,EAAOC,QAAU,CAAC,kBAAkB,0C,uJCDrB,MAA0B,oC,OCU1B,SAASC,EAAT,GAIW,IAHxBC,EAGuB,EAHvBA,SACAC,EAEuB,EAFvBA,OACAC,EACuB,EADvBA,OAEA,OACE,mCACGD,EACC,qCACE,qBAAKE,UAAWC,IAAM,cAAtB,SACE,sBAAKD,UAAWC,IAAM,mBAAtB,UACGJ,EACD,qBACEK,QAAS,WACPH,KAFJ,SAKE,qBACEC,UAAWC,IAAM,gBACjBE,IAAKC,EACLC,IAAI,gBAKZ,qBAAKL,UAAWC,IAAM,8BAEtB,O,qBCrCK,MAA0B,kCCU1B,SAASK,EAAT,GAGW,IAFxBR,EAEuB,EAFvBA,OACAC,EACuB,EADvBA,OAEA,OACE,mCACE,qBACEC,UAAWC,IAAM,mBACjBC,QAAS,WACPH,KAHJ,SAMGD,EACC,qBAAKK,IAAKC,EAASC,IAAI,eAEvB,qBAAKF,IAAKI,EAAWF,IAAI,mBCbpB,SAASG,EAAT,GAA0D,IAAlCX,EAAiC,EAAjCA,SACrC,EAA0BY,IAAMC,SAAiB,CAAEZ,QAAQ,IAA3D,mBAAOa,EAAP,KAAcC,EAAd,KAEMC,EAAe,WACnBD,GAAS,SAACE,GACR,OAAO,2BAAKA,GAAZ,IAAuBhB,QAASgB,EAAUhB,aAI9C,OACE,gCACE,cAACF,EAAD,CAAWG,OAAQc,EAAcf,OAAQa,EAAMb,OAA/C,SACGD,IAEH,cAACS,EAAD,CAAgBR,OAAQa,EAAMb,OAAQC,OAAQc,O,4CC1BrC,MAA0B,uCCA1B,MAA0B,yCCArCE,EACFC,OAAOD,mBAAqBC,OAAOC,wBACjCC,EACFF,OAAOE,mBAAqBF,OAAOG,wBAGjCC,EAAc,IAAIL,EAElBM,EAAwB,IAAIH,EAChCG,EAAsBC,cAJR,cAI+B,GAC7CF,EAAYG,SAAWF,EACvBD,EAAYI,KAAO,QACnBJ,EAAYK,gBAAiB,EAEdL,ICXHM,EDWGN,I,iBEPFO,EAAsB,SAACC,GAClC,OAAOC,IACJC,KAAK,6CAA8CF,GACnDG,MAAK,YACJ,OADiC,EAA1BC,KACKC,a,SDRNP,K,wBAAAA,M,KAKE,IEHFA,EFGE,GACVQ,KGTW,SAAcC,GAEzB,IAAIC,EAAM,GAEV,OAAOD,GACH,IAAK,GAIL,IAAK,iBACDC,EAAM,qDACN,MAEJ,IAAK,YACDA,EAAM,qEACN,MAEJ,IAAK,MACDA,EAAM,gEACN,MAEJ,IAAK,UACDA,EAAM,4DAIdpB,OAAOqB,KAAKD,EAAI,gC,SDrBRV,K,8BAAAA,E,oCAAAA,E,yCAAAA,M,KAQE,IEJFY,EFIE,GACVJ,KGdW,WACX,IAAIK,EAAeC,KAAKC,MACpBL,EAAG,yFAAqFG,GAC5FvB,OAAOqB,KAAKD,EAAK,8BHYjBM,QIfW,SAAiBC,GAE5B,IAAIJ,EAAeI,EAAKC,UACpBR,EAAG,yFAAqFG,GAC5FvB,OAAOqB,KAAKD,EAAK,8BJYjBS,UKhBW,SAAmBC,EAAiBC,GAE/C,IAAIC,EAAO,GACX,QAAQ,GACN,KAAa,GAARD,GAAqB,GAARA,EAChBC,EAAO,MACP,MAEF,KAAa,GAARD,EACHC,EAAO,OACP,MAEF,KAAKD,GAAQ,IAAMA,GAAQ,GACzBC,EAAO,QACP,MAEF,KAAa,KAARD,GAAuB,KAARA,EAClBC,EAAO,OACP,MAEF,QACEA,EAAO,MACPF,EAAYN,KAAKC,MAGrB,IAAIL,EAAG,yEAAqEY,EAArE,wBAAyFF,GAChG9B,OAAOqB,KAAKD,EAAK,+BCpBN,SAASa,EAAcC,GAGpC,OADAC,QAAQC,IAAIF,GACJA,EAASG,OAAOC,aAEtB,KAAKC,EAAUrB,KACb,IACMC,EADae,EAASM,WAAWC,OACd,OAAWC,YACpCC,EAAWzB,KAAKC,GAChB,MAGF,KAAKyB,EAAgB1B,KACnB2B,EAAkB3B,OAClB,MAGF,KAAK0B,EAAgBlB,QACnB,IACMoB,EADaZ,EAASM,WAAWC,OACH,aAAaC,YAC7Cf,EAAO,IAAIH,KAAKsB,GACpBD,EAAkBnB,QAAQC,GAC1B,MAGF,KAAKiB,EAAgBf,UACnB,IACMkB,EADab,EAASM,WAAWC,OACT,eAAeO,YACzClB,EAAY,IAAIN,KAClBuB,EAAWN,OAAOX,UAAUY,aAC5Bd,UACIqB,EAAU,IAAIzB,KAAKuB,EAAWN,OAAOQ,QAAQP,aAAad,UAC1DsB,EAAS,MAEXnB,EAAOoB,KAAKC,OAAOH,EAAUnB,GAAaoB,GAC9CpB,GAAwBoB,EACxBL,EAAkBhB,UAAUC,EAAWC,GACvC,MAGF,QACEI,QAAQC,IAAI,uBJhCH,SAASiB,IACtB,MAAsC5D,IAAMC,SAC1C4B,EAAgBgC,MADlB,mBAAOC,EAAP,KAAoBC,EAApB,KAIA,EAAoC/D,IAAMC,SAAiB,IAA3D,mBAAO+D,EAAP,KAAmBC,EAAnB,KAL4D,4CAO5D,WAA6BC,GAA7B,eAAAC,EAAA,6DACEJ,EAAelC,EAAgBuC,SADjC,SAGyBlD,EAAU,CAC/BmD,MAAOH,EACPI,UAAW,WACXC,SAAU,KANd,OAS0B,mBANlB9B,EAHR,QASe+B,OACXP,EAAcxB,EAASgC,iBAEvBjC,EAAcC,GAEhBsB,EAAelC,EAAgBgC,MAdjC,4CAP4D,sBAwB5D,SAASa,EAAkBC,GACzBZ,GAAe,SAAC1D,GACd,OAAOsE,KA4BX,OAxBA3E,IAAM4E,WAAU,WACdC,EAAYC,aAAe,WACzBb,EAAc,SACdS,EAAkB7C,EAAgBkD,YAGpCF,EAAYG,SAAW,SAAUC,GAC/B,IAAIC,EAAOD,EAAME,QAAQC,OAAS,EAC9BlB,EAAkBe,EAAME,QAAQD,GAAM,GAAGG,WAC7CpB,EAAcC,GAvC0C,oCAwCxDoB,CAAcpB,IAGhBW,EAAYU,YAAc,WACxBV,EAAYW,OACZd,EAAkB7C,EAAgBgC,OAGpCgB,EAAYY,QAAU,SAAUR,GAC9BP,EAAkB7C,EAAgBgC,MAClCnB,QAAQC,IAAIsC,MAEb,IAGD,mCACE,qBAAK1F,UAAWC,IAAK,UAArB,SACE,sBAAKD,UAAWC,IAAM,iBAAtB,UACE,sBAAKD,UAAWC,IAAM,cAAtB,UACE,qBAAKD,UAAWC,IAAM,mBAAtB,SACE,qBACEE,IAAKgG,EACL9F,IAAI,QACJL,UAAWC,IAAM,uBAIrB,oBAAID,UAAWC,IAAM,sBAArB,SACE,6CAGF,oBAAID,UAAWC,IAAM,uBAArB,SACE,yDAIJ,oBAAID,UAAWC,IAAM,yBAArB,SACE,+BAAOsE,MAET,mBAAGvE,UAAWC,IAAM,uBAApB,SACE,+BAAOwE,MAGT,sBAAKzE,UAAWC,IAAM,qBAAtB,UACE,qBACED,UACEuE,IAAgBjC,EAAgBkD,UAC5BvF,IAAM,kBACN,KAIR,qBACED,UACEuE,IAAgBjC,EAAgBkD,UAC5BvF,IAAM,gBACN,KAIR,qBACED,UAAWC,IAAM,kBACjBC,QAAS,WACPoF,EAAYc,SAHhB,SAME,qBAAKjG,IAAKkG,EAAYC,MAAM,KAAKjG,IAAI,4B,SAhHvCiC,K,yBAAAA,E,gBAAAA,E,sBAAAA,M,KKTG,UAA0B,sCCoB1BiE,MAdf,WACE,OACE,qCACE,sBAAKvG,UAAWC,IAAK,IAArB,UACE,qBAAKE,IAAKqG,EAAWnG,IAAI,kBACzB,qBAAKL,UAAWC,IAAMwG,MAAtB,wCAEF,cAACjG,EAAD,UACE,cAAC6D,EAAD,UCAOqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB7E,MAAK,YAAkD,IAA/C8E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K,kBCfAhH,EAAOC,QAAU,CAAC,aAAa,8BAA8B,kBAAkB,mCAAmC,wBAAwB,yCAAyC,eAAe,kC,kBCAlMD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,sB","file":"static/js/main.4a5fca6d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"voicecommandinterface_container__2Awt9\",\"bot-container\":\"voicecommandinterface_bot-container__2lBKs\",\"bot-header\":\"voicecommandinterface_bot-header__3LpK6\",\"bot-header-logo\":\"voicecommandinterface_bot-header-logo__2Qa_T\",\"bot-header-heading\":\"voicecommandinterface_bot-header-heading__e3n-9\",\"bot-header-question\":\"voicecommandinterface_bot-header-question__3WOnQ\",\"bot-mic-circle\":\"voicecommandinterface_bot-mic-circle__A7On3\",\"bot-mic-container\":\"voicecommandinterface_bot-mic-container__3-T8I\",\"bot-listening-heading\":\"voicecommandinterface_bot-listening-heading__o-JKZ\",\"bot-recognised-text\":\"voicecommandinterface_bot-recognised-text__PCnoC\",\"bot-mic-wave\":\"voicecommandinterface_bot-mic-wave__2nKom\",\"bot-outer-wave\":\"voicecommandinterface_bot-outer-wave__3u9Aj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"floating-button\":\"floatingbutton_floating-button__2hUaj\"};","export default __webpack_public_path__ + \"static/media/Chevron.12e8882c.svg\";","import React, { ReactElement } from \"react\";\nimport style from \"./dialogbox.module.css\";\nimport Chevron from \"../../assets/Chevron.svg\";\n\ninterface IProps {\n  children: JSX.Element | JSX.Element[];\n  opened: Boolean;\n  toggle: Function;\n}\n\nexport default function DialogBox({\n  children,\n  opened,\n  toggle,\n}: IProps): ReactElement {\n  return (\n    <>\n      {opened ? (\n        <>\n          <div className={style[\"dialog-box\"]}>\n            <div className={style[\"dialog-box-body\"]}>\n              {children}\n              <div\n                onClick={() => {\n                  toggle();\n                }}\n              >\n                <img\n                  className={style[\"close-button\"]}\n                  src={Chevron}\n                  alt=\"hide\"\n                ></img>\n              </div>\n            </div>\n          </div>\n          <div className={style[\"dialog-box-background\"]}></div>\n        </>\n      ) : null}\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/Voice.cd02eb0c.svg\";","import React, { ReactElement } from \"react\";\nimport style from \"./floatingbutton.module.css\";\nimport VoiceIcon from \"../../assets/Voice.svg\";\nimport Chevron from \"../../assets/Chevron.svg\";\n\ninterface IProps {\n  opened: Boolean;\n  toggle: Function;\n}\n\nexport default function FloatingButton({\n  opened,\n  toggle,\n}: IProps): ReactElement {\n  return (\n    <>\n      <div\n        className={style[\"floating-button\"]}\n        onClick={() => {\n          toggle();\n        }}\n      >\n        {opened ? (\n          <img src={Chevron} alt=\"voice-icon\" />\n        ) : (\n          <img src={VoiceIcon} alt=\"voice-icon\" />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport DialogBox from \"../DialogBox\";\nimport FloatingButton from \"../FloatingButton\";\n\ninterface Props {\n  children: JSX.Element | JSX.Element[];\n}\n\ninterface IState {\n  opened: Boolean;\n}\n\nexport default function BotInterface({ children }: Props): ReactElement {\n  const [state, setState] = React.useState<IState>({ opened: false });\n\n  const handleToggle = () => {\n    setState((prevState: IState) => {\n      return { ...prevState, opened: !prevState.opened };\n    });\n  };\n\n  return (\n    <div>\n      <DialogBox toggle={handleToggle} opened={state.opened}>\n        {children}\n      </DialogBox>\n      <FloatingButton opened={state.opened} toggle={handleToggle} />\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/Microphone.481484f4.svg\";","export default __webpack_public_path__ + \"static/media/SprinklrLogo.88b190d5.svg\";","let SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition;\nlet SpeechGrammarList =\n  window.SpeechGrammarList || window.webkitSpeechGrammarList;\n\nlet grammar = \"#JSGF V1.0;\";\nlet recognition = new SpeechRecognition();\n\nlet speechRecognitionList = new SpeechGrammarList();\nspeechRecognitionList.addFromString(grammar, 1);\nrecognition.grammars = speechRecognitionList;\nrecognition.lang = \"en-IN\";\nrecognition.interimResults = false;\n\nexport default recognition;\n","import Open from './Open'\n\n\nexport enum Intents {\n    Open = \"AdsManager.Open\",\n\n}\n\nexport default{\n    Open,\n\n}","import axios, { AxiosResponse } from \"axios\";\n\ninterface IRequestBody {\n  query: String;\n  sessionID: String;\n}\n\nexport const getIntent: Function = (body: IRequestBody) => {\n  return axios\n    .post(\"https://demo-voicebot.herokuapp.com/api/v1\", body)\n    .then(({ data }: AxiosResponse) => {\n      return data.message;\n    });\n};\n","import Open from './Open'\nimport SetDate from './SetDate'\nimport SetPeriod from './SetPeriod'\n\n\nexport enum Intents {\n    Open = \"EditorialCalendar.Open\",\n    SetDate = \"EditorialCalendar.SetDate\",\n    SetPeriod = \"EditorialCalendar.SetPeriod\",\n   \n\n}\n\nexport default{\n    Open,\n    SetDate,\n    SetPeriod,\n\n}\n  ","export default function open(entity:string){\n\n    let url = ''\n\n    switch(entity){\n        case \"\":\n            url = 'https://champagne.sprinklr.com/advertising/manager'\n            break;\n        \n        case \"Strategy Group\":\n            url = 'https://champagne.sprinklr.com/advertising/manager'\n            break;\n            \n        case \"Campaigns\":\n            url = 'https://champagne.sprinklr.com/advertising/manager/PAID_INITIATIVE'\n            break;\n\n        case \"Ads\":\n            url = 'https://champagne.sprinklr.com/advertising/manager/AD_VARIANT'\n            break;\n        \n        case \"Ad Sets\":\n            url = 'https://champagne.sprinklr.com/advertising/manager/AD_SET'\n            break;\n    }\n\n    window.open(url,\"SingleSecondaryWindowName\")\n\n}\n\n","import React, { ReactElement } from \"react\";\nimport style from \"./voicecommandinterface.module.css\";\nimport Microphone from \"../../assets/Microphone.svg\";\nimport SprinklrLogo from \"../../assets/SprinklrLogo.svg\";\nimport Recognition from \"../../utils/SpeechRecognitionConfig\";\nimport { getIntent } from \"../../utils/ApiService\";\nimport parseResponse from \"../../processIntent/parseResponse\";\n\n\nexport enum SpeechStateEnum {\n  listening = \"Listening...\",\n  idle = \"- Idle -\",\n  loading = \"Loading...\",\n}\n\nexport default function VoiceCommandInterface(): ReactElement {\n  const [speechState, setSpeechState] = React.useState<SpeechStateEnum>(\n    SpeechStateEnum.idle\n  );\n\n  const [speechText, setSpeechText] = React.useState<String>(\"\");\n\n  async function handleCommand(command: String) {\n    setSpeechState(SpeechStateEnum.loading);\n\n    const response = await getIntent({\n      query: command,\n      sessionId: \"huds7823\",\n      contexts: [],\n    });\n\n    if (response.action === \"input.unknown\") {\n      setSpeechText(response.fulfillmentText);\n    } else {\n      parseResponse(response);\n    }\n    setSpeechState(SpeechStateEnum.idle);\n  }\n\n  function handleStateChange(newState: SpeechStateEnum) {\n    setSpeechState((prevState: SpeechStateEnum): SpeechStateEnum => {\n      return newState;\n    });\n  }\n\n  React.useEffect((): void => {\n    Recognition.onaudiostart = function () {\n      setSpeechText(\". . .\");\n      handleStateChange(SpeechStateEnum.listening);\n    };\n\n    Recognition.onresult = function (event: any) {\n      var last = event.results.length - 1;\n      var command: String = event.results[last][0].transcript;\n      setSpeechText(command);\n      handleCommand(command);\n    };\n\n    Recognition.onspeechend = function () {\n      Recognition.stop();\n      handleStateChange(SpeechStateEnum.idle);\n    };\n\n    Recognition.onerror = function (event: Event) {\n      handleStateChange(SpeechStateEnum.idle);\n      console.log(event);\n    };\n  }, []);\n\n  return (\n    <>\n      <div className={style[\"container\"]}>\n        <div className={style[\"bot-container\"]}>\n          <div className={style[\"bot-header\"]}>\n            <div className={style[\"bot-header-logo\"]}>\n              <img\n                src={SprinklrLogo}\n                alt=\" Logo\"\n                className={style[\"bot-header-logo\"]}\n              />\n            </div>\n\n            <h1 className={style[\"bot-header-heading\"]}>\n              <span>Hello !</span>\n            </h1>\n\n            <h2 className={style[\"bot-header-question\"]}>\n              <span>Can we help you?</span>\n            </h2>\n          </div>\n\n          <h1 className={style[\"bot-listening-heading\"]}>\n            <span>{speechState}</span>\n          </h1>\n          <p className={style[\"bot-recognised-text\"]}>\n            <span>{speechText}</span>\n          </p>\n\n          <div className={style[\"bot-mic-container\"]}>\n            <div\n              className={\n                speechState === SpeechStateEnum.listening\n                  ? style[\"bot-outer-wave\"]\n                  : \"\"\n              }\n            ></div>\n\n            <div\n              className={\n                speechState === SpeechStateEnum.listening\n                  ? style[\"bot-mic-wave\"]\n                  : \"\"\n              }\n            ></div>\n\n            <div\n              className={style[\"bot-mic-circle\"]}\n              onClick={(): void => {\n                Recognition.start();\n              }}\n            >\n              <img src={Microphone} width=\"30\" alt=\"Microphone\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","export default function open() {\n    let milliseconds = Date.now();\n    let url = `https://champagne.sprinklr.com/marketing/planner/calendar/view/day?currentDate=${milliseconds}`;\n    window.open(url, \"SingleSecondaryWindowName\");\n  }","export default function setDate(date:Date) {\n\n    let milliseconds = date.getTime();\n    let url = `https://champagne.sprinklr.com/marketing/planner/calendar/view/day?currentDate=${milliseconds}`;\n    window.open(url, \"SingleSecondaryWindowName\");\n  }","export default function setPeriod(startDate:Number,days: Number) {\n    \n    let view = \"\";\n    switch (true) {\n      case days == 0 || days == 1:\n        view = \"day\";\n        break;\n\n      case days == 7:\n        view = \"week\";\n        break;\n\n      case days >= 28 && days <= 31:\n        view = \"month\";\n        break;\n\n      case days == 365 || days == 366:\n        view = \"year\";\n        break;\n\n      default:\n        view = \"day\";\n        startDate = Date.now();\n    }\n\n    let url = `https://champagne.sprinklr.com/marketing/planner/calendar/view/${view}?currentDate=${startDate}`;\n    window.open(url, \"SingleSecondaryWindowName\");\n  }","import AdsManager from \"./AdsManager\";\nimport { Intents as AdsIntent } from \"./AdsManager\";\nimport EditorialCalendar from \"./EditorialCalendar\";\nimport { Intents as EditorialIntent } from \"./EditorialCalendar\";\n\n// All Intent Responses will come here, from here corresponding action will be taken on each Intent response.\nexport default function parseResponse(response: any) {\n\n  console.log(response)\n  switch (response.intent.displayName) {\n    \n    case AdsIntent.Open:{\n      const parameters = response.parameters.fields;\n      const entity = parameters[\"entity\"].stringValue;\n      AdsManager.Open(entity)\n      break;\n    }\n\n    case EditorialIntent.Open:{\n      EditorialCalendar.Open()\n      break;\n    }  \n\n    case EditorialIntent.SetDate: {\n      const parameters = response.parameters.fields;\n      const dateTime: string = parameters[\"date-time\"].stringValue;\n      let date = new Date(dateTime);\n      EditorialCalendar.SetDate(date);\n      break;\n    }\n\n    case EditorialIntent.SetPeriod: {\n      const parameters = response.parameters.fields;\n      const datePeriod = parameters[\"date-period\"].structValue;\n      let startDate = new Date(\n        datePeriod.fields.startDate.stringValue\n      ).getTime();\n      const endDate = new Date(datePeriod.fields.endDate.stringValue).getTime();\n      const oneDay = 24 * 60 * 60 * 1000;\n\n      let days = Math.round((endDate - startDate) / oneDay);\n      startDate = startDate + oneDay;\n      EditorialCalendar.SetPeriod(startDate, days);\n      break;\n    }\n\n    default: {\n      console.log(\"No Matched Intents\");\n    }\n  }\n}\n","export default __webpack_public_path__ + \"static/media/navigator.8851064a.gif\";","import React from \"react\";\nimport style from \"./App.module.css\";\nimport BotInterface from \"./components/BotInterface\";\nimport VoiceCommandInterface from \"./components/VoiceCommandInterface\";\nimport Navigator from \"./assets/navigator.gif\";\n\nfunction App() {\n  return (\n    <>\n      <div className={style[\"App\"]}>\n        <img src={Navigator} alt=\"navigator-gif\"></img>\n        <div className={style.title}>Say hello to VoiceBot !</div>\n      </div>\n      <BotInterface>\n        <VoiceCommandInterface />\n      </BotInterface>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog-box\":\"dialogbox_dialog-box__3_skr\",\"dialog-box-body\":\"dialogbox_dialog-box-body__2pQuI\",\"dialog-box-background\":\"dialogbox_dialog-box-background__248Su\",\"close-button\":\"dialogbox_close-button__3EmI9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"title\":\"App_title__-GfWs\"};"],"sourceRoot":""}